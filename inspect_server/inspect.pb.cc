// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inspect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inspect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ngxrpc {
namespace inspect {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Machine_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* Process_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* Service_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* Application_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_inspect_2eproto() {
  protobuf_AddDesc_inspect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inspect.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, json_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, json_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Machine_descriptor_ = file->service(0);
  Process_descriptor_ = file->service(1);
  Service_descriptor_ = file->service(2);
  Application_descriptor_ = file->service(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inspect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inspect_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_inspect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rinspect.proto\022\016ngxrpc.inspect\"\027\n\007Reque"
    "st\022\014\n\004json\030\001 \001(\014\"\030\n\010Response\022\014\n\004json\030\001 \001"
    "(\0142\362\001\n\007Machine\0228\n\003cpu\022\027.ngxrpc.inspect.R"
    "equest\032\030.ngxrpc.inspect.Response\0228\n\003mem\022"
    "\027.ngxrpc.inspect.Request\032\030.ngxrpc.inspec"
    "t.Response\0228\n\003net\022\027.ngxrpc.inspect.Reque"
    "st\032\030.ngxrpc.inspect.Response\0229\n\004disk\022\027.n"
    "gxrpc.inspect.Request\032\030.ngxrpc.inspect.R"
    "esponse2\253\002\n\007Process\0228\n\003cpu\022\027.ngxrpc.insp"
    "ect.Request\032\030.ngxrpc.inspect.Response\0228\n"
    "\003mem\022\027.ngxrpc.inspect.Request\032\030.ngxrpc.i"
    "nspect.Response\0228\n\003net\022\027.ngxrpc.inspect."
    "Request\032\030.ngxrpc.inspect.Response\0229\n\004dis"
    "k\022\027.ngxrpc.inspect.Request\032\030.ngxrpc.insp"
    "ect.Response\0227\n\002fd\022\027.ngxrpc.inspect.Requ"
    "est\032\030.ngxrpc.inspect.Response2\200\002\n\007Servic"
    "e\022<\n\007version\022\027.ngxrpc.inspect.Request\032\030."
    "ngxrpc.inspect.Response\0228\n\003api\022\027.ngxrpc."
    "inspect.Request\032\030.ngxrpc.inspect.Respons"
    "e\022;\n\006accept\022\027.ngxrpc.inspect.Request\032\030.n"
    "gxrpc.inspect.Response\022@\n\013connections\022\027."
    "ngxrpc.inspect.Request\032\030.ngxrpc.inspect."
    "Response2\221\001\n\013Application\022>\n\tinterface\022\027."
    "ngxrpc.inspect.Request\032\030.ngxrpc.inspect."
    "Response\022B\n\rrequeststatus\022\027.ngxrpc.inspe"
    "ct.Request\032\030.ngxrpc.inspect.ResponseB\006\200\001"
    "\001\370\001\001b\006proto3", 1052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inspect.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inspect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inspect_2eproto {
  StaticDescriptorInitializer_inspect_2eproto() {
    protobuf_AddDesc_inspect_2eproto();
  }
} static_descriptor_initializer_inspect_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Request::kJsonFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ngxrpc.inspect.Request)
}

Request::Request(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ngxrpc.inspect.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ngxrpc.inspect.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ngxrpc.inspect.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  json_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inspect_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Request>(arena);
}

void Request::Clear() {
  json_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ngxrpc.inspect.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ngxrpc.inspect.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ngxrpc.inspect.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ngxrpc.inspect.Request)
  // optional bytes json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json(), output);
  }

  // @@protoc_insertion_point(serialize_end:ngxrpc.inspect.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ngxrpc.inspect.Request)
  // optional bytes json = 1;
  if (this->json().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ngxrpc.inspect.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  // optional bytes json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->json());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.json().size() > 0) {
    set_json(from.json());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Request temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Request::UnsafeArenaSwap(Request* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  json_.Swap(&other->json_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kJsonFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ngxrpc.inspect.Response)
}

Response::Response(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ngxrpc.inspect.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ngxrpc.inspect.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:ngxrpc.inspect.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  json_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inspect_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Response>(arena);
}

void Response::Clear() {
  json_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ngxrpc.inspect.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ngxrpc.inspect.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ngxrpc.inspect.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ngxrpc.inspect.Response)
  // optional bytes json = 1;
  if (this->json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json(), output);
  }

  // @@protoc_insertion_point(serialize_end:ngxrpc.inspect.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ngxrpc.inspect.Response)
  // optional bytes json = 1;
  if (this->json().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ngxrpc.inspect.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  // optional bytes json = 1;
  if (this->json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->json());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.json().size() > 0) {
    set_json(from.json());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Response temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Response::UnsafeArenaSwap(Response* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  json_.Swap(&other->json_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

Machine::~Machine() {}

const ::google::protobuf::ServiceDescriptor* Machine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Machine_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Machine::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Machine_descriptor_;
}

void Machine::cpu(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cpu() not implemented.");
  done->Run();
}

void Machine::mem(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method mem() not implemented.");
  done->Run();
}

void Machine::net(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method net() not implemented.");
  done->Run();
}

void Machine::disk(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method disk() not implemented.");
  done->Run();
}

void Machine::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Machine_descriptor_);
  switch(method->index()) {
    case 0:
      cpu(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 1:
      mem(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 2:
      net(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 3:
      disk(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Machine::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Request::default_instance();
    case 1:
      return ::ngxrpc::inspect::Request::default_instance();
    case 2:
      return ::ngxrpc::inspect::Request::default_instance();
    case 3:
      return ::ngxrpc::inspect::Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Machine::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Response::default_instance();
    case 1:
      return ::ngxrpc::inspect::Response::default_instance();
    case 2:
      return ::ngxrpc::inspect::Response::default_instance();
    case 3:
      return ::ngxrpc::inspect::Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

Machine_Stub::Machine_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Machine_Stub::Machine_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Machine_Stub::~Machine_Stub() {
  if (owns_channel_) delete channel_;
}

void Machine_Stub::cpu(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Machine_Stub::mem(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Machine_Stub::net(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Machine_Stub::disk(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

Process::~Process() {}

const ::google::protobuf::ServiceDescriptor* Process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Process_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Process::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Process_descriptor_;
}

void Process::cpu(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cpu() not implemented.");
  done->Run();
}

void Process::mem(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method mem() not implemented.");
  done->Run();
}

void Process::net(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method net() not implemented.");
  done->Run();
}

void Process::disk(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method disk() not implemented.");
  done->Run();
}

void Process::fd(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method fd() not implemented.");
  done->Run();
}

void Process::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Process_descriptor_);
  switch(method->index()) {
    case 0:
      cpu(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 1:
      mem(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 2:
      net(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 3:
      disk(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 4:
      fd(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Process::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Request::default_instance();
    case 1:
      return ::ngxrpc::inspect::Request::default_instance();
    case 2:
      return ::ngxrpc::inspect::Request::default_instance();
    case 3:
      return ::ngxrpc::inspect::Request::default_instance();
    case 4:
      return ::ngxrpc::inspect::Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Process::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Response::default_instance();
    case 1:
      return ::ngxrpc::inspect::Response::default_instance();
    case 2:
      return ::ngxrpc::inspect::Response::default_instance();
    case 3:
      return ::ngxrpc::inspect::Response::default_instance();
    case 4:
      return ::ngxrpc::inspect::Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

Process_Stub::Process_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Process_Stub::Process_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Process_Stub::~Process_Stub() {
  if (owns_channel_) delete channel_;
}

void Process_Stub::cpu(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Process_Stub::mem(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Process_Stub::net(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Process_Stub::disk(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Process_Stub::fd(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
// ===================================================================

Service::~Service() {}

const ::google::protobuf::ServiceDescriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Service::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

void Service::version(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method version() not implemented.");
  done->Run();
}

void Service::api(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method api() not implemented.");
  done->Run();
}

void Service::accept(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method accept() not implemented.");
  done->Run();
}

void Service::connections(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method connections() not implemented.");
  done->Run();
}

void Service::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Service_descriptor_);
  switch(method->index()) {
    case 0:
      version(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 1:
      api(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 2:
      accept(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 3:
      connections(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Service::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Request::default_instance();
    case 1:
      return ::ngxrpc::inspect::Request::default_instance();
    case 2:
      return ::ngxrpc::inspect::Request::default_instance();
    case 3:
      return ::ngxrpc::inspect::Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Service::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Response::default_instance();
    case 1:
      return ::ngxrpc::inspect::Response::default_instance();
    case 2:
      return ::ngxrpc::inspect::Response::default_instance();
    case 3:
      return ::ngxrpc::inspect::Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

Service_Stub::Service_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Service_Stub::Service_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Service_Stub::~Service_Stub() {
  if (owns_channel_) delete channel_;
}

void Service_Stub::version(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Service_Stub::api(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Service_Stub::accept(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Service_Stub::connections(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

Application::~Application() {}

const ::google::protobuf::ServiceDescriptor* Application::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Application_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Application::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Application_descriptor_;
}

void Application::interface(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method interface() not implemented.");
  done->Run();
}

void Application::requeststatus(::google::protobuf::RpcController* controller,
                         const ::ngxrpc::inspect::Request*,
                         ::ngxrpc::inspect::Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method requeststatus() not implemented.");
  done->Run();
}

void Application::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Application_descriptor_);
  switch(method->index()) {
    case 0:
      interface(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    case 1:
      requeststatus(controller,
             ::google::protobuf::down_cast<const ::ngxrpc::inspect::Request*>(request),
             ::google::protobuf::down_cast< ::ngxrpc::inspect::Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Application::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Request::default_instance();
    case 1:
      return ::ngxrpc::inspect::Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Application::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ngxrpc::inspect::Response::default_instance();
    case 1:
      return ::ngxrpc::inspect::Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

Application_Stub::Application_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Application_Stub::Application_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Application_Stub::~Application_Stub() {
  if (owns_channel_) delete channel_;
}

void Application_Stub::interface(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Application_Stub::requeststatus(::google::protobuf::RpcController* controller,
                              const ::ngxrpc::inspect::Request* request,
                              ::ngxrpc::inspect::Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace inspect
}  // namespace ngxrpc

// @@protoc_insertion_point(global_scope)
